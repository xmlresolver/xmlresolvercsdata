plugins {
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.9.6'
}

defaultTasks "dist"

import com.nwalsh.gradle.saxon.SaxonXsltTask

// Find dotnet
def dotnetex = null
// Laboriously construct a search path that includes some default locations
// plus the users actual path.
def spath = ["/usr/local/share/dotnet"]
System.getenv("PATH").split(System.getProperty("path.separator")).each { dir ->
  spath += [dir]
}
spath.each { dir ->
  if (dotnetex == null) {
    def fn = new File(dir + "/dotnet")
    if (fn.exists() && fn.canExecute()) {
      dotnetex = fn.toString()
    } else {
      fn = new File(dir + "/dotnet.exe")
      if (fn.exists() && fn.canExecute()) {
        dotnetex = fn.toString()
      }
    }
  }
}

if (dotnetex == null) {
  println("WARNING: Failed to find dotnet[.exe]!")
}

// You must specify the key and source externally in order to push the
// nuget package. For example, they can be read from
// ~/.gradle/gradle.properties. They must not be committed to the
// repository!
if (!hasProperty("nugetApiKey")) {
  ext.nugetApiKey = "KEYREQUIREDTOPUSH"
}
if (!hasProperty("nugetSource")) {
  ext.nugetSource = "SOURCEREQUIREDTOPUSH"
}

task copy_data(type: Copy) {
  into "${projectDir}/XmlResolverData/XmlResolverData/Data"
  from ("${projectDir}/data/src/data") {
    exclude "manifest.xml"
  }
}

task make_data_catalog(type: SaxonXsltTask, dependsOn: ["copy_data"]) {
  input "${projectDir}/data/src/data/manifest.xml"
  output "${projectDir}/XmlResolverData/XmlResolverData/Data/catalog.xml"
  stylesheet "${projectDir}/tools/make-catalog.xsl"
}

task make_data_tests(type: SaxonXsltTask, dependsOn: ["copy_data"]) {
  outputs.file "${projectDir}/XmlResolverData/UnitTests/DataTest.cs"
  input "${projectDir}/data/src/data/manifest.xml"
  output "${projectDir}/XmlResolverData/XmlResolverData/Data/catalog.xml"
  stylesheet "${projectDir}/tools/make-catalog.xsl"
  parameters (
    'generate-tests': "${projectDir}/XmlResolverData/UnitTests/DataTest.cs"
  )
}

task make_data_csproj(type: SaxonXsltTask, dependsOn: ["copy_data"]) {
  input "${projectDir}/data/src/data/manifest.xml"
  output "${projectDir}/XmlResolverData/XmlResolverData/XmlResolverData.csproj"
  stylesheet "${projectDir}/tools/make-csproj.xsl"
}

task dotnetBuild(
  dependsOn: ["make_data_catalog", "make_data_tests", "make_data_csproj", "copy_data"]
) {
  inputs.files fileTree(dir: "${projectDir}/XmlResolverData/XmlResolverData")
  outputs.file "${projectDir}/XmlResolverData/XmlResolverData/bin/Release/net8.0/XmlResolverData.dll"
  outputs.file "${projectDir}/XmlResolverData/XmlResolverData/bin/Release/XmlResolverData.${dataVersion}.nupkg"

  doLast {
    exec {
      workingDir = "${projectDir}/XmlResolverData"
      commandLine dotnetex, 'restore', 'XmlResolverData.sln', '--verbosity', 'Normal'
    }
  }
  doLast {
    exec {
      workingDir = "${projectDir}/XmlResolverData"
      commandLine dotnetex, 'build', 'XmlResolverData.sln', '--verbosity', 'Normal',
        '--configuration', 'Release',  '/nodereuse:false', '--no-restore',
        "-p:Version=${dataVersion}", "-p:PackageVersion=${dataVersion}"
    }
  }
}

task "dotnetTest"(
) {
  doLast {
    println("No testing in 1.2.5 because there's a chicken-and-egg problem with .NET versions");
//    exec {
//      workingDir = projectDir
//      environment "CSHARP_XMLRESOLVER_ROOT", projectDir
//      commandLine dotnetex, 'test', 'XmlResolverData/XmlResolverData.sln',
//        '--verbosity', 'Normal', '--configuration', 'Release',
//        '--no-build', '/p:CollectCoverage=true',
//        '/p:ExcludeByFile="**/*.designer.cs;**/*.xaml.cs;**/*.g.cs"',
//        '/p:CoverletOutputFormat=opencover',
//        "/p:CoverletOutput=${buildDir}/reports/coverlet/",
//        '--',
//        "NUnit.TestOutputXml=${buildDir}/reports/nunit"
//    }
  }
}

task "dotnetNugetPush"(
) {
  dependsOn "dotnetBuild", "dotnetTest"

  inputs.files "${projectDir}/XmlResolverData/XmlResolverData/bin/Release/XmlResolverData.${dataVersion}.nupkg"

  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, "restore", "XmlResolverData/XmlResolverData.sln", "--verbosity", "Normal"
    }
  }

  doLast {
    exec {
      workingDir = projectDir
      commandLine dotnetex, "nuget", "push",
        "${projectDir}/XmlResolverData/XmlResolverData/bin/Release/XmlResolverData.${dataVersion}.nupkg",
        "--api-key", nugetApiKey, "--source", nugetSource
    }
  }
}

task dist(dependsOn: ["dotnetBuild", "dotnetTest"]) {
  // Just somewhere to hang dependencies
}

task helloWorld() {
  doLast {
    println("Hello, world.")
  }
}
